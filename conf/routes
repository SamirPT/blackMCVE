# Static pages
GET		/									@controllers.Application.index()
GET		/account							@controllers.Application.index()
GET		/venues								@controllers.Application.index()
GET		/my_venues							@controllers.Application.index()
GET		/my_preferred_roles					@controllers.Application.index()
GET		/admin								@controllers.Application.index()
GET		/admin/edit_venue					@controllers.Application.index()
GET		/venue/:id/clicker					@controllers.Application.venue(id: String)
GET		/venue/:id/clicker_menu				@controllers.Application.venue(id: String)
GET		/venue/:id/employees				@controllers.Application.venue(id: String)
GET		/venue/:id/employee_roles			@controllers.Application.venue(id: String)
GET		/venue/:id/events					@controllers.Application.venue(id: String)
GET		/venue/:id/event_details			@controllers.Application.venue(id: String)
GET		/venue/:id/event_add				@controllers.Application.venue(id: String)
GET		/venue/:id/promotions				@controllers.Application.venue(id: String)
GET		/venue/:id/reservations				@controllers.Application.venue(id: String)
GET		/venue/:id/schedule					@controllers.Application.venue(id: String)
GET		/venue/:id/tables					@controllers.Application.venue(id: String)
GET		/venue/:id/reports					@controllers.Application.venue(id: String)
GET		/venue/:id/feedbacks				@controllers.Application.venue(id: String)
GET		/venue/:id/feedback_edit			@controllers.Application.venue(id: String)
GET		/venue/:id/reports_clicker			@controllers.Application.venue(id: String)
GET		/venue/:id/reports_reservations		@controllers.Application.venue(id: String)
GET		/venue/:id/reports_promoter			@controllers.Application.venue(id: String)
GET		/venue/:id/reports_employee			@controllers.Application.venue(id: String)
GET		/venue/:id/tags						@controllers.Application.venue(id: String)
GET		/venue/:id/customers				@controllers.Application.venue(id: String)
GET		/venue/:id/venue_snapshot			@controllers.Application.venue(id: String)
GET		/venue/:id/promo_employees			@controllers.Application.venue(id: String)
GET		/venue/:id/associated				@controllers.Application.venue(id: String)
GET		/venue/:id/eod						@controllers.Application.venue(id: String)
GET		/signup								@controllers.Application.login()
GET		/signin								@controllers.Application.login()
GET		/confirm							@controllers.Application.login()
GET		/api.json							@controllers.ApiHelpController.getResources
GET		/api  								@controllers.Application.swagger()
GET		/reservation/:token					@controllers.Application.reservation(token: String)

# API v1
GET		/api/v1/dict/roles					@controllers.api.v1.Dict.roles()
GET		/api/v1/dict/bstypes				@controllers.api.v1.Dict.bottleServiceTypesList()
GET		/api/v1/dict/groups					@controllers.api.v1.Dict.reservationGroupTypesList()
GET		/api/v1/dict/promoters				@controllers.api.v1.Dict.getPromotersList()

GET		/api/v1/search/users				@controllers.api.v1.Search.findUsers(namePart: String ?= "", phonePart: String ?= "", venueId: String ?= "")

POST	/api/v1/payinfo						@controllers.api.v1.PayInfos.create()
PUT		/api/v1/payinfo						@controllers.api.v1.PayInfos.update()

GET		/api/v1/user						@controllers.api.v1.Users.get()
GET		/api/v1/user/:id/customerInfo		@controllers.api.v1.Users.getCustomerInfo(id: Long, venueId: Long)
PUT		/api/v1/user/:id/token				@controllers.api.v1.Users.addToken(id: Long, token: String, token_type: String)
DELETE	/api/v1/user/:id/token				@controllers.api.v1.Users.deleteToken(id: Long, token_type: String )
PUT		/api/v1/user/customerInfo			@controllers.api.v1.Users.updateCustomerInfo(venueId: Long)
GET		/api/v1/user/settings				@controllers.api.v1.Users.getSettings()
PUT		/api/v1/user/settings				@controllers.api.v1.Users.setSettings()
GET		/api/v1/user/api_key				@controllers.api.v1.Users.getApiKey(phoneNumber: String, securityCode:String)
GET		/api/v1/user/code					@controllers.api.v1.Users.getSecurityCode(phoneNumber: String)
POST	/api/v1/user						@controllers.api.v1.Users.create()
PUT		/api/v1/user						@controllers.api.v1.Users.update()
DELETE  /api/v1/user						@controllers.api.v1.Users.deleteCurrentUser()

GET		/api/v1/schedule					@controllers.api.v1.Schedule.my(venueId: Long)
GET		/api/v1/schedule/prevdate			@controllers.api.v1.Venues.getPrevAvailableDate(venueId: Long, from: String)
GET		/api/v1/schedule/nextdate			@controllers.api.v1.Venues.getNextAvailableDate(venueId: Long, from: String)
GET		/api/v1/schedule/calendar			@controllers.api.v1.Events.getEventsCalendar(date: String, venueId: Long)

GET		/api/v1/promotions/fb/users			@controllers.api.v1.Promotions.getFacebookUsers(venueId: Long)
POST	/api/v1/promotions/fb				@controllers.api.v1.Promotions.postPromotion()

GET		/api/v1/promoter/:id/venues			@controllers.api.v1.Promoters.notAssociatedVenues(id: Long)
GET		/api/v1/promoter/:id/venues/my		@controllers.api.v1.Promoters.associatedVenues(id: Long)

GET		/api/v1/venues						@controllers.api.v1.Venues.list()
GET		/api/v1/venues/my					@controllers.api.v1.Venues.myList()
GET		/api/v1/venue/:id					@controllers.api.v1.Venues.get(id: Long)
POST	/api/v1/venue						@controllers.api.v1.Venues.create()
PUT		/api/v1/venue						@controllers.api.v1.Venues.update()
DELETE	/api/v1/venue/:id					@controllers.api.v1.Venues.delete(id: Long)

GET		/api/v1/venue/:id/eod				@controllers.api.v1.Venues.getEndOfDayStatement(id: Long, eventId: Long, date: String)
GET		/api/v1/venue/:id/eod/report		@controllers.api.v1.Venues.getEndOfDayStatementReport(id: Long, eventId: Long, date: String)
GET		/api/v1/venue/:id/tag				@controllers.api.v1.Venues.getTagsList(id: Long)
POST	/api/v1/venue/:id/tag				@controllers.api.v1.Venues.addTagToVenue(id: Long)
DELETE	/api/v1/venue/:id/tag				@controllers.api.v1.Venues.deleteTagFromVenue(id: Long, tag: String)
GET		/api/v1/venue/:id/customers			@controllers.api.v1.Venues.getCustomers(id: Long, tags: String ?= "", pageIndex: Integer, pageSize: Integer)
GET		/api/v1/venue/:id/upcoming			@controllers.api.v1.Venues.getUpcomingReservations(id: Long, pageIndex: Integer, pageSize: Integer)
GET		/api/v1/venue/:id/snapshot			@controllers.api.v1.Venues.getSnapshot(id: Long, date: String, eventId: Long)
PUT		/api/v1/venue/:id/state				@controllers.api.v1.Venues.setEventInstanceState(id: Long, date: String, eventId: Long)
GET		/api/v1/venue/:id/people			@controllers.api.v1.Venues.getPeople(id: Long)
GET		/api/v1/venue/:id/requests			@controllers.api.v1.Venues.getRequests(id: Long)
PUT		/api/v1/venue/:id/request			@controllers.api.v1.Venues.updateRequest(id: Long)
POST	/api/v1/venue/:id/request			@controllers.api.v1.Venues.createRequest(id: Long)
DELETE	/api/v1/venue/:id/request			@controllers.api.v1.Venues.deleteRequest(id: Long, userId ?= "")
POST	/api/v1/venue/:id/promoter			@controllers.api.v1.Venues.createPromoterRequest(id: Long, promoterId: Long)
PUT		/api/v1/venue/:id/promoter			@controllers.api.v1.Venues.approvePromoterRequest(id: Long, promoterId: Long)
DELETE	/api/v1/venue/:id/promoter			@controllers.api.v1.Venues.deletePromoterRequest(id: Long, promoterId: Long)
GET		/api/v1/venue/:id/staff				@controllers.api.v1.Venues.getStaff(id: Long)
GET		/api/v1/venue/:id/staffLists		@controllers.api.v1.Venues.getStaffLists(id: Long)
GET		/api/v1/venue/:id/nextdate			@controllers.api.v1.Venues.getNextAvailableDate(id: Long, from: String)
GET		/api/v1/venue/:id/prevdate			@controllers.api.v1.Venues.getPrevAvailableDate(id: Long, from: String)
GET		/api/v1/venue/:id/seating			@controllers.api.v1.Venues.getAvailableSeating(id: Long)
GET		/api/v1/venue/:id/feed				@controllers.api.v1.Venues.getVenueFeed(id: Long)
DELETE	/api/v1/venue/:id/feed				@controllers.api.v1.Venues.markNotificationAsReadByType(id: Long, notification_type: String)
DELETE	/api/v1/venue/:id/feed/:notification_id			@controllers.api.v1.Venues.markNotificationAsReadById(id: Long, notification_id: Long)
GET		/api/v1/venue/:id/settings			@controllers.api.v1.Venues.getSettings(id: Long)
PUT		/api/v1/venue/:id/settings			@controllers.api.v1.Venues.setSettings(id: Long)
GET		/api/v1/venue/:id/guest/:guestId	@controllers.api.v1.Venues.getGuestInfo(id: Long, guestId: Long)

GET		/api/v1/reservations				@controllers.api.v1.Reservations.list(venueId: String ?= "", date: String ?= "", eventId: Long)
GET		/api/v1/reservations/bs				@controllers.api.v1.Reservations.getReservationWithBsInfoslist(venueId: String, date: String, bsType: String, eventId: Long)
GET		/api/v1/reservation/:id				@controllers.api.v1.Reservations.getReservation(id: Long)
POST	/api/v1/reservation					@controllers.api.v1.Reservations.createReservation(approved: Boolean ?= false)
PUT		/api/v1/reservation					@controllers.api.v1.Reservations.updateReservation()
PUT		/api/v1/reservation/:id/tags			@controllers.api.v1.Reservations.setTags(id: Long)
PUT		/api/v1/reservation/:id/move			@controllers.api.v1.Reservations.moveToDate(id: Long, newDate: String, eventId: Long)
PUT		/api/v1/reservation/:id/state			@controllers.api.v1.Reservations.changeReservationState(id: Long, newState: String)
PUT		/api/v1/reservation/:id/guests			@controllers.api.v1.Reservations.changeNumberOfSeatedGuests(id: Long, action: String, gender: String ?= "")
PUT		/api/v1/reservation/:id/assignStaffBatch	@controllers.api.v1.Reservations.assignStaffBatch(id: Long)
PUT		/api/v1/reservation/:id/unassignStaffBatch	@controllers.api.v1.Reservations.removeStaffBatch(id: Long)
PUT		/api/v1/reservation/:id/unassign		@controllers.api.v1.Reservations.unassignTable(id: Long)
PUT		/api/v1/reservation/:id/assignTable		@controllers.api.v1.Reservations.assignTable(id: Long)
PUT		/api/v1/reservation/:id/reactivate		@controllers.api.v1.Reservations.reactivateReservation(id: Long)
PUT		/api/v1/reservation/:id/image		@controllers.api.v1.Reservations.attachImageToReservation(id: Long, url: String)
DELETE	/api/v1/reservation/:id/image		@controllers.api.v1.Reservations.deleteImageFromReservation(id: Long, url: String)
DELETE	/api/v1/reservation/:id				@controllers.api.v1.Reservations.deleteReservation(id: Long)

GET		/api/v1/feedbacks					@controllers.api.v1.Feedbacks.getFeedbacks(reservationId: String ?= "", userId: String ?= "")
POST	/api/v1/feedbacks					@controllers.api.v1.Feedbacks.createFeedback()
PUT		/api/v1/feedbacks					@controllers.api.v1.Feedbacks.updateFeedback()
DELETE	/api/v1/feedbacks/:id				@controllers.api.v1.Feedbacks.deleteFeedback(id: Long)

GET		/api/v1/tables						@controllers.api.v1.Tables.getTables(venueId: Long)
GET		/api/v1/tables/seating				@controllers.api.v1.Tables.getTablesSeating(venueId: Long, date: String, eventId: Long)

POST	/api/v1/tables						@controllers.api.v1.Tables.createTable()
PUT		/api/v1/tables						@controllers.api.v1.Tables.updateTable()
PUT		/api/v1/tables/:id/close			@controllers.api.v1.Tables.closeTable(id: Long, date: String)
PUT		/api/v1/tables/:id/open				@controllers.api.v1.Tables.openTable(id: Long, date: String)
DELETE	/api/v1/tables/:id					@controllers.api.v1.Tables.deleteTable(id: Long)

GET		/api/v1/clicker/state				@controllers.api.v1.Clicker.getCurrentState(venueId: Long, eventId: Long)
PUT		/api/v1/clicker/state				@controllers.api.v1.Clicker.updateCurrentState(venueId: Long, eventId: Long)
POST	/api/v1/clicker/alert				@controllers.api.v1.Clicker.sendAlert()

GET		/api/v1/events						@controllers.api.v1.Events.getEvents(date: String ?= "", venueId: Long)
POST	/api/v1/events						@controllers.api.v1.Events.createEvent()
PUT		/api/v1/events						@controllers.api.v1.Events.updateEvent()
DELETE	/api/v1/events/:id					@controllers.api.v1.Events.deleteEvent(id: Long)
GET		/api/v1/events/calendar				@controllers.api.v1.Events.getEventsCalendar(date: String, venueId: Long)
GET		/api/v1/events/:id/reservations		@controllers.api.v1.Events.getUpcomingEventReservationsNumber(id: Long)

GET		/api/v1/reports/reservations		@controllers.api.v1.Reports.getReservationsReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/reservations/pdf	@controllers.api.v1.Reports.getReservationsPdfReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/promoters			@controllers.api.v1.Reports.getPromotersReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/promoters/pdf		@controllers.api.v1.Reports.getPromotersPdfReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/employees			@controllers.api.v1.Reports.getEmployeesReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/employees/pdf		@controllers.api.v1.Reports.getEmployeesPdfReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/clicker				@controllers.api.v1.Reports.getClickerReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)
GET		/api/v1/reports/clicker/pdf			@controllers.api.v1.Reports.getClickerPdfReport(dateTo: String, dateFrom: String ?= "", venueId: Long, reportType: String)

GET		/api/v1/guest						@controllers.api.v1.guest.Guest.getProfile()
GET		/api/v1/guest/settings				@controllers.api.v1.guest.Guest.getSettings()
PUT		/api/v1/guest/settings				@controllers.api.v1.guest.Guest.setSettings()
GET		/api/v1/guest/reservations			@controllers.api.v1.guest.Guest.getReservations()
GET		/api/v1/guest/reservation/:id		@controllers.api.v1.guest.Guest.getReservationTicket(id: Long)

GET		/auth								@controllers.Application.auth()
GET		/callback							@org.pac4j.play.CallbackController.callback()
POST	/callback							@org.pac4j.play.CallbackController.callback()
GET		/logout								@controllers.Application.logout()
GET		/logout-client						@org.pac4j.play.ApplicationLogoutController.logout()

GET		/sms/reply							@controllers.Sms.reply()
POST	/sms/reservation					@controllers.Sms.reservation()
POST	/images/userpic						@controllers.Images.uploadAndAttachToUser()
POST	/images								@controllers.Images.upload()

# Map static resources from the /public folder to the /assets URL path
GET		/assets/*file						controllers.Assets.versioned(path="/public", file: Asset)

# Utility route for URIs with trailing slash
GET		/*path/								@controllers.Application.untrail(path: String)